public class Solution {
    public int FindShortestSubArray(int[] nums) {
        Dictionary <int,int[]> dic = new Dictionary <int,int[]> ();//创建一个字典，键为数组中的数，值用来记录度以及数的索引
        int max = 0;
        int min = int.MinValue;
        for(int i=0;i<nums.Length;i++)//如果键中没有nums[i]，说明这个值第一次出现，创建这个值的键，并且初始化这个键的值。
        {
            if(!dic.ContainsKey(nums[i]))
            {
                dic.Add(nums[i],new int[3]{1,i,i});//值为一个三维数组，第一个位置用来确定出现最多的数，第二个位置记录该数第一次出现的位置，第三个位置记录该数最后一次出现的位置
            }
            else
            {
                dic[nums[i]][0]++;//如果数出现过两次，更新他出现的次数，加一
                dic[nums[i]][2]=i;//更新他最后一次出现的位置
            }
        }
        foreach(var count in dic)//遍历哈希表
        {
            if(max < count.Value[0])//如果最大值小于遍历的count的频次，将max更新为该count的频次count.Value[0]
            {
                max = count.Value[0];
                min = count.Value[2]-count.Value[1];//最小值更新为该数最后一次出现的位置减去该数第一次的位置，求出最短的子数组
            }
            else if(max == count.Value[0])//如果最大值等于遍历的count的频次，但是最小值>count.Value[2]-count.Value[1]，说明此时不是最短子数组，更新min
            {
                if(min > count.Value[2]-count.Value[1])
                {
                    min = count.Value[2]-count.Value[1];
                }
            }
        }
        return min+1;
    }
}
